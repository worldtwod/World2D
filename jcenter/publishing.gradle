/*
 * Copyright  2017   Fredy Campi√±o
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

version = libraryVersion

/*
if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
*/

def isAndroid = project.hasProperty("android")

if(isAndroid) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())


publishing {
    publications {
        Production(MavenPublication) {
            //artifact("$buildDir/outputs/aar/app-release.aar")

            groupId publishedGroupId
            artifactId artifact
            version this.version

            if(isAndroid) {
                artifact(sourcesJar)
                artifact("$buildDir/outputs/aar/$artifactId-release.aar")
            }


            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies
                // (we don't want the test ones), adding a <dependencies> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        //this conditional parse the  implementation project(path: ':moduleName')
                        def dependencyGroup    = rootProject.name!=it.group?it.group:groupId
                        def dependencyArtifact = it.name
                        def dependencyVersion  = it.version
                        def dependencyNode     = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependencyGroup)
                        dependencyNode.appendNode('artifactId',dependencyArtifact)
                        dependencyNode.appendNode('version', dependencyVersion)
                    }
                }
            }
        }
    }
}


bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")


    publications = ['Production']
    configurations = ['archives']

  pkg {
    repo = bintrayRepo
    name = bintrayName
    desc = libraryDescription

    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = allLicenses
    publish = true
    publicDownloadNumbers = true
    version {
      desc = libraryDescription
      gpg {
        sign = true//Determines whether to GPG sign the files. The default is false
        passphrase = properties.getProperty("bintray.gpg.password")
        //Optional. The passphrase for GPG signing'
      }
    }
  }
}